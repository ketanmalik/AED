/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.EntpAdmin;

import Business.EcoSystem.EcoSystem;
import Business.Employee.Employee;
import Business.EnterpriseDirectory.Enterprise;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.Organization.Organization.Type;
import Business.Role.AddDoctorsRole;
import Business.Role.AddPatientsRole;
import Business.Role.AdvertisingSupervisorRole;
import Business.Role.DeliveryAssistantRole;
import Business.Role.InspectorRole;
import Business.Role.ManufacturerRole;
import Business.Role.ResearcherRole;
import Business.Role.Role;
import Business.util.RegexValidations;
import UI.MainJFrame.MainJFrame;
import java.awt.Color;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ketanmalik
 */
public class ManageUserJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageUserJPanel
     */
    private JPanel displayPanel;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private Organization organization;
    private EcoSystem ecoSystem;
    private String mode = "";
    private String identifier = "";
    private UserAccount uaToUpdate = null;
    private String opr = "";

    public ManageUserJPanel(JPanel displayPanel, UserAccount userAccount, Enterprise enterprise, Organization organization, EcoSystem ecoSystem, String mode) {
        initComponents();
        this.displayPanel = displayPanel;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.organization = organization;
        this.ecoSystem = ecoSystem;
        this.mode = mode;
        setLabel();
        modifyButtons();
        populateTable();
        populateOrgDropdown();
        populateOtherDropdowns();
        enableFields(false);
        clearFields();
        addUaBtn.setText("Add User Account");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        roleLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        organizationTbl = new javax.swing.JTable();
        orgTypeLabel = new javax.swing.JLabel();
        orgNameDropdown = new javax.swing.JComboBox<>();
        orgNameLabel = new javax.swing.JLabel();
        usernameNameTxtField = new javax.swing.JTextField();
        orgCompLabel = new javax.swing.JLabel();
        addUaBtn = new javax.swing.JButton();
        orgNameLabel1 = new javax.swing.JLabel();
        passwordTxtField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        roleDropdown = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        empDropdown = new javax.swing.JComboBox<>();
        addBtn = new javax.swing.JButton();
        viewBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));

        titleLabel.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        titleLabel.setForeground(new java.awt.Color(255, 255, 255));
        titleLabel.setText("Welcome Name");

        roleLabel.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        roleLabel.setForeground(new java.awt.Color(255, 255, 255));
        roleLabel.setText("Role: Enterprise Admin");

        organizationTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Username", "Role", "Employee Name", "Connected Organization"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(organizationTbl);
        if (organizationTbl.getColumnModel().getColumnCount() > 0) {
            organizationTbl.getColumnModel().getColumn(0).setResizable(false);
            organizationTbl.getColumnModel().getColumn(1).setResizable(false);
            organizationTbl.getColumnModel().getColumn(2).setResizable(false);
            organizationTbl.getColumnModel().getColumn(3).setResizable(false);
        }

        orgTypeLabel.setForeground(new java.awt.Color(255, 255, 255));
        orgTypeLabel.setText("Organization Name:");

        orgNameDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orgNameDropdownActionPerformed(evt);
            }
        });

        orgNameLabel.setForeground(new java.awt.Color(255, 255, 255));
        orgNameLabel.setText("Usernane:");

        usernameNameTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameNameTxtFieldActionPerformed(evt);
            }
        });

        orgCompLabel.setForeground(new java.awt.Color(255, 255, 255));
        orgCompLabel.setText("User Account List:");

        addUaBtn.setText("Add User Account");
        addUaBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUaBtnActionPerformed(evt);
            }
        });

        orgNameLabel1.setForeground(new java.awt.Color(255, 255, 255));
        orgNameLabel1.setText("Password:");

        passwordTxtField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordTxtFieldActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Employee:");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Role:");

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("(6-12 characters)");

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("(Atleast 8 letters, 1 uppercase, 1 lowercase, 1 digit & 1 special character)");

        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        viewBtn.setText("View");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(349, 349, 349)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(titleLabel)
                            .addComponent(roleLabel)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(orgTypeLabel)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(empDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(orgNameLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(passwordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel8))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(roleDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(orgNameDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(orgNameLabel)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(usernameNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel7)))
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(orgCompLabel)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 750, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(66, 66, 66)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(updateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(viewBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(419, 419, 419)
                .addComponent(addUaBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(titleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(roleLabel)
                .addGap(50, 50, 50)
                .addComponent(orgCompLabel)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(addBtn)
                        .addGap(18, 18, 18)
                        .addComponent(viewBtn)
                        .addGap(18, 18, 18)
                        .addComponent(updateBtn)))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orgTypeLabel)
                    .addComponent(orgNameDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(orgNameLabel)
                    .addComponent(usernameNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(empDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(orgNameLabel1)
                    .addComponent(passwordTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roleDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(50, 50, 50)
                .addComponent(addUaBtn)
                .addContainerGap(94, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void orgNameDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orgNameDropdownActionPerformed
        populateOtherDropdowns();
    }//GEN-LAST:event_orgNameDropdownActionPerformed

    private void usernameNameTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameNameTxtFieldActionPerformed

    }//GEN-LAST:event_usernameNameTxtFieldActionPerformed

    private void enableFields(boolean bool) {
        orgNameDropdown.setEnabled(bool);
        empDropdown.setEnabled(bool);
        roleDropdown.setEnabled(bool);
        usernameNameTxtField.setEnabled(bool);
        passwordTxtField.setEnabled(bool);
        addUaBtn.setEnabled(bool);
    }

    private void clearFields() {
        usernameNameTxtField.setText("");
        passwordTxtField.setText("");
    }

    private void modifyButtons() {
        MainJFrame.manageNetworkBtn.setVisible(true);
        MainJFrame.manageNetworkBtn.setText("Manage Organizations");
        MainJFrame.manageNetworkBtn.setOpaque(false);
        MainJFrame.manageNetworkBtn.setContentAreaFilled(false);
        MainJFrame.manageNetworkBtn.setBorderPainted(false);
        MainJFrame.manageNetworkBtn.setForeground(Color.white);

        MainJFrame.manageEnterpriseBtn.setVisible(true);
        MainJFrame.manageEnterpriseBtn.setText("Manage Employees");
        MainJFrame.manageEnterpriseBtn.setOpaque(false);
        MainJFrame.manageEnterpriseBtn.setContentAreaFilled(false);
        MainJFrame.manageEnterpriseBtn.setBorderPainted(false);
        MainJFrame.manageEnterpriseBtn.setForeground(Color.white);

        MainJFrame.manageAdminBtn.setVisible(true);
        MainJFrame.manageAdminBtn.setText("Manage User Accounts");
        MainJFrame.manageAdminBtn.setOpaque(false);
        MainJFrame.manageAdminBtn.setContentAreaFilled(false);
        MainJFrame.manageAdminBtn.setBorderPainted(false);
        MainJFrame.manageAdminBtn.setForeground(Color.black);

        MainJFrame.logoutBtn.setOpaque(false);
        MainJFrame.logoutBtn.setContentAreaFilled(false);
        MainJFrame.logoutBtn.setBorderPainted(false);
    }

    private void addUaBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addUaBtnActionPerformed
        String s = String.valueOf(orgNameDropdown.getSelectedItem());
        Type type = getType(s);

        String username = usernameNameTxtField.getText();
        String password = passwordTxtField.getText();
        String empName = String.valueOf(empDropdown.getSelectedItem());
        String r = String.valueOf(roleDropdown.getSelectedItem());

        if (username.equals("") || username == null) {
            JOptionPane.showMessageDialog(null, "Username cannot be empty");
            return;
        }
        if (password.equals("") || password == null) {
            JOptionPane.showMessageDialog(null, "Password cannot be empty");
            return;
        }
        if (type == null) {
            for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (o.getName().equals(s)) {
                    type = o.getOrgType();
                    break;
                }
            }
        }
        if (opr.equalsIgnoreCase("add")) {
            Organization org = null;
            Employee emp = null;
            Role role = getRole(r);

            for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
                if (o.getName().equals(s)) {
                    org = o;
                    for (Employee e : o.getEmployeeDirectory().getEmployeeList()) {
                        if (e.getName().equals(empName)) {
                            emp = e;
                            break;
                        }
                    }
                    break;
                }
            }

            for (UserAccount ua : org.getUserAccountDirectory().getUserAccountList()) {
                if (ua.getEmployee().getName().equalsIgnoreCase(empName)) {
                    JOptionPane.showMessageDialog(null, "This user already has an account", "Invalid Account", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            org.getUserAccountDirectory().createUserAccount(emp.getName(), username, password, emp, role, identifier);
            JOptionPane.showMessageDialog(null, "Useraccount added successfully");
        } else {
            if (uaToUpdate.getUsername().equalsIgnoreCase(username) && uaToUpdate.getPassword().equals(password)) {
                JOptionPane.showMessageDialog(null, "Please make some changes to update", "No changes made", JOptionPane.ERROR_MESSAGE);
                return;
            }
            uaToUpdate.setUsername(username);
            uaToUpdate.setPassword(password);
            JOptionPane.showMessageDialog(null, "Useraccount updated successfully");
        }

        populateTable();
        clearFields();
        enableFields(false);
        populateOrgDropdown();

//        for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
//            if (type.getValue().equals(o.getOrgType().getValue())) {
//                org = o;
//                for (Employee e : o.getEmployeeDirectory().getEmployeeList()) {
//                    if (e.getName().equalsIgnoreCase(empName)) {
//                        emp = e;
//                        break;
//                    }
//                }
//                break;
//            }
//        }
//        org.getUserAccountDirectory().createUserAccount(emp.getName(), username, password, emp, role, identifier);
//        populateOrgTable(mode, col);

    }//GEN-LAST:event_addUaBtnActionPerformed

    private void passwordTxtFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordTxtFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordTxtFieldActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        enableFields(true);
        clearFields();
        populateOrgDropdown();
        opr = "add";
        addUaBtn.setText("Add User Account");
    }//GEN-LAST:event_addBtnActionPerformed

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        int selectedRow = organizationTbl.getSelectedRow();
        if (selectedRow >= 0) {
            addUaBtn.setText("Add User Account");
            enableFields(false);
            empDropdown.setEnabled(true);
            roleDropdown.setEnabled(true);
            clearFields();
            UserAccount ua = (UserAccount) organizationTbl.getValueAt(selectedRow, 0);
            Organization o = (Organization) organizationTbl.getValueAt(selectedRow, 1);
            orgNameDropdown.setSelectedItem(String.valueOf(o.getName()));
            usernameNameTxtField.setText(ua.getUsername());
            passwordTxtField.setText(ua.getPassword());
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to view");
        }
    }//GEN-LAST:event_viewBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = organizationTbl.getSelectedRow();
        if (selectedRow >= 0) {
            opr = "update";
            enableFields(false);
            addUaBtn.setText("Confirm Changes");
            addUaBtn.setEnabled(true);
            usernameNameTxtField.setEnabled(true);
            passwordTxtField.setEnabled(true);
            uaToUpdate = (UserAccount) organizationTbl.getValueAt(selectedRow, 0);
            Organization o = (Organization) organizationTbl.getValueAt(selectedRow, 1);
            usernameNameTxtField.setText(uaToUpdate.getUsername());
            passwordTxtField.setText(uaToUpdate.getPassword());
            orgNameDropdown.setSelectedItem(String.valueOf(o.getName()));
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to update");
            return;
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void setLabel() {
        titleLabel.setText("Welcome " + userAccount.getName());
    }

    private void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel) organizationTbl.getModel();
        dtm.setRowCount(0);
        for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
            for (UserAccount u : o.getUserAccountDirectory().getUserAccountList()) {
                Object[] row = new Object[4];
                row[0] = u;
                row[1] = o;
                row[2] = u.getEmployee();
                row[3] = u.getRole();
                dtm.addRow(row);
            }
        }
    }

    private void populateOrgDropdown() {
        orgNameDropdown.removeAllItems();
        if (mode.equals("emp") || mode.equals("user")) {
            for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
                orgNameDropdown.addItem(String.valueOf(o.getName()));
            }
        }
    }

    private void populateOtherDropdowns() {
        try {
            if (mode.equals("user")) {
                String s = String.valueOf(orgNameDropdown.getSelectedItem());
//                Type type = getType(s);

                for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    if (o.getName().equals(s)) {
                        roleDropdown.removeAllItems();
                        for (Role r : o.getSupportedRole()) {
                            roleDropdown.addItem(String.valueOf(r));
                        }
                        empDropdown.removeAllItems();
                        for (Employee e : o.getEmployeeDirectory().getEmployeeList()) {
                            empDropdown.addItem(String.valueOf(e));
                        }
                        break;
                    }
                }

//                if (type == null) {
//                    for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
//                        if (o.getName().equals(s)) {
//                            type = o.getOrgType();
//                            break;
//                        }
//                    }
//                }
//                for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
//                    if (o.getOrgType().getValue().equals(type.getValue())) {
//                        populateEmployeeComboBox(o);
//                        populateRoleComboBox(o);
//                        break;
//                    }
//                }
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null, "Cannot load employee list");
        }
    }

    private void populateEmployeeComboBox(Organization organization) {
        empDropdown.removeAllItems();
        for (Employee employee : organization.getEmployeeDirectory().getEmployeeList()) {
            empDropdown.addItem(String.valueOf(employee));
        }
    }

    private void populateRoleComboBox(Organization organization) {
        roleDropdown.removeAllItems();
        for (Role role : organization.getSupportedRole()) {
            roleDropdown.addItem(String.valueOf(role));
        }
    }

    private Organization.Type getType(String s) {
        Organization.Type type = null;
        if (s.equalsIgnoreCase("Manufacture")) {
            type = Organization.Type.Manufacture;
        } else if (s.equalsIgnoreCase("Research")) {
            type = Organization.Type.Research;
        } else if (s.equalsIgnoreCase("Inspection")) {
            type = Organization.Type.Inspection;
        } else if (s.equalsIgnoreCase("Delivery")) {
            type = Organization.Type.Delivery;
        } else if (s.equalsIgnoreCase("Advertising")) {
            type = Organization.Type.Advertising;
        } else if (s.equalsIgnoreCase("Doctor")) {
            type = Organization.Type.Doctor;
        } else if (s.equalsIgnoreCase("Patient")) {
            type = Organization.Type.Patient;
        }
        return type;
    }

    private Role getRole(String r) {
        Role role = null;
        if (r.equals("ManufacturerRole")) {
            role = new ManufacturerRole();
            identifier = "cm";
        } else if (r.equalsIgnoreCase("ResearcherRole")) {
            role = new ResearcherRole();
            identifier = "cr";
        } else if (r.equalsIgnoreCase("InspectorRole")) {
            role = new InspectorRole();
            identifier = "ci";
        } else if (r.equalsIgnoreCase("DeliveryAssistantRole")) {
            role = new DeliveryAssistantRole();
            identifier = "cd";
        } else if (r.equalsIgnoreCase("AdvertisingSupervisorRole")) {
            role = new AdvertisingSupervisorRole();
            identifier = "ma";
        } else if (r.equalsIgnoreCase("DoctorsHRRole")) {
            role = new AddDoctorsRole();
            identifier = "md";
        } else if (r.equalsIgnoreCase("PatientsHRRole")) {
            role = new AddPatientsRole();
            identifier = "mp";
        }
        return role;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton addUaBtn;
    private javax.swing.JComboBox<String> empDropdown;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel orgCompLabel;
    private javax.swing.JComboBox<String> orgNameDropdown;
    private javax.swing.JLabel orgNameLabel;
    private javax.swing.JLabel orgNameLabel1;
    private javax.swing.JLabel orgTypeLabel;
    private javax.swing.JTable organizationTbl;
    private javax.swing.JTextField passwordTxtField;
    private javax.swing.JComboBox<String> roleDropdown;
    private javax.swing.JLabel roleLabel;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JButton updateBtn;
    private javax.swing.JTextField usernameNameTxtField;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables
}
