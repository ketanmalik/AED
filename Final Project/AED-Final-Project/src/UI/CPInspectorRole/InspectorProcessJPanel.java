/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.CPInspectorRole;

import Business.EcoSystem.EcoSystem;
import Business.EnterpriseDirectory.CompoundPharmacyEnterprise;
import Business.EnterpriseDirectory.Enterprise;
import Business.EnterpriseDirectory.MarketingEnterprise;
import Business.Network.Network;
import Business.Organization.AdvertisingOrganization;
import Business.Organization.DeliveryOrganization;
import Business.Organization.InspectionOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import Business.util.RegexValidations;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author ketanmalik
 */
public class InspectorProcessJPanel extends javax.swing.JPanel {

    /**
     * Creates new form InspectorProcessJPanel
     */
    private JPanel displayPanel;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private InspectionOrganization manufactureOrganization;
    private EcoSystem ecoSystem;
    private WorkRequest request;
    private static int id = 1;

    public InspectorProcessJPanel(JPanel displayPanel, UserAccount userAccount, Enterprise enterprise, Organization organization, EcoSystem ecoSystem, WorkRequest request) {
        initComponents();
        this.displayPanel = displayPanel;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.manufactureOrganization = (InspectionOrganization) organization;
        this.ecoSystem = ecoSystem;
        this.request = request;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        notesTxtField = new javax.swing.JTextField();
        completeBtn = new javax.swing.JButton();
        failBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Notes to Delivery Team:");

        completeBtn.setText("Complete Process");
        completeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeBtnActionPerformed(evt);
            }
        });

        failBtn.setText("Fail Inspection");
        failBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                failBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(notesTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(backBtn)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(290, 290, 290)
                        .addComponent(completeBtn)
                        .addGap(18, 18, 18)
                        .addComponent(failBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(408, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(backBtn)
                .addGap(73, 73, 73)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(notesTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(completeBtn)
                    .addComponent(failBtn))
                .addContainerGap(546, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        displayPanel.remove(this);
        Component[] componentArray = displayPanel.getComponents();
        Component component = componentArray[componentArray.length - 1];
        InspectorWorkAreaJPanel iwjp = (InspectorWorkAreaJPanel) component;
        iwjp.populateTables();
        CardLayout layout = (CardLayout) displayPanel.getLayout();
        layout.previous(displayPanel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void completeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeBtnActionPerformed
        if (request.getMedicine().getPrice() == 0) {
            int input = JOptionPane.showOptionDialog(null, "Are you you want to send " + request.getId() + " request for marketing?", "Process Confirmation", JOptionPane.OK_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);
            if (input == JOptionPane.OK_OPTION) {
                String progress = (notesTxtField.getText() == null || notesTxtField.getText().equals("")) ? "" : notesTxtField.getText();
                request.setProgress(progress);
                request.setStatus("Sent for marketing");
                request.setSender(userAccount);
                request.setReceiver(null);
                sendToMarketing();
                JOptionPane.showMessageDialog(null, "Your request has been sent to marketing organization");
                displayPanel.remove(this);
                Component[] componentArray = displayPanel.getComponents();
                Component component = componentArray[componentArray.length - 1];
                InspectorWorkAreaJPanel mwjp = (InspectorWorkAreaJPanel) component;
                mwjp.populateTables();
                CardLayout layout = (CardLayout) displayPanel.getLayout();
                layout.previous(displayPanel);
            }

        } else {
            int input = JOptionPane.showOptionDialog(null, "Are you you want to send " + request.getId() + " order for delivery?", "Process Confirmation", JOptionPane.OK_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);
            if (input == JOptionPane.OK_OPTION) {
                String progress = (notesTxtField.getText() == null || notesTxtField.getText().equals("")) ? "" : notesTxtField.getText();
                request.setProgress(progress);
                request.setStatus("Sent for delivery");
                request.setSender(userAccount);
                request.setReceiver(null);
                sendToDelivery();
                JOptionPane.showMessageDialog(null, "Your request has been sent to delivery team");
                displayPanel.remove(this);
                Component[] componentArray = displayPanel.getComponents();
                Component component = componentArray[componentArray.length - 1];
                InspectorWorkAreaJPanel mwjp = (InspectorWorkAreaJPanel) component;
                mwjp.populateTables();
                CardLayout layout = (CardLayout) displayPanel.getLayout();
                layout.previous(displayPanel);
            }
        }


    }//GEN-LAST:event_completeBtnActionPerformed

    private void failBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_failBtnActionPerformed
        String message = notesTxtField.getText();
        if (message == null || message.equals("") || !RegexValidations.nameValidation(message)) {
            JOptionPane.showMessageDialog(null, "Please enter valid message for failing the inspection", "Invalid Message", JOptionPane.ERROR_MESSAGE);
            return;
        }
        int input = JOptionPane.showOptionDialog(null, "Are you you want to fail inspection for " + request.getId() + " request?", "Process Confirmation", JOptionPane.OK_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);
        if (input == JOptionPane.OK_OPTION) {
            request.setMessage(message);
            request.setSender(userAccount);
            request.setReceiver(null);

            if (request.getMedicine().getPrice() == 0) {
                request.setStatus("Research Request Accepted");
            } else {
                request.setStatus("Order Confirmed");
            }
            JOptionPane.showMessageDialog(null, "Your request has been sent back to the appropriate team");
            displayPanel.remove(this);
            Component[] componentArray = displayPanel.getComponents();
            Component component = componentArray[componentArray.length - 1];
            InspectorWorkAreaJPanel mwjp = (InspectorWorkAreaJPanel) component;
            mwjp.populateTables();
            CardLayout layout = (CardLayout) displayPanel.getLayout();
            layout.previous(displayPanel);
        }
    }//GEN-LAST:event_failBtnActionPerformed
    private void sendToDelivery() {
//        Organization org = null;
        List<Organization> org = new ArrayList<>();

//        for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
//            if (o instanceof DeliveryOrganization) {
//                org = o;
//                break;
//            }
//        }
        for (Network n : ecoSystem.getNetworkDirectory().getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                if (e instanceof CompoundPharmacyEnterprise) {
                    for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                        if (o instanceof DeliveryOrganization) {
                            org.add(o);
                        }
                    }
                }
            }
        }

        if (org != null) {
//            org.getWorkQueue().getWorkRequestList().add(request);
            for (Organization o : org) {
                o.getWorkQueue().getWorkRequestList().add(request);
            }
            userAccount.getWorkQueue().getWorkRequestList().add(request);
        }
    }

    private void sendToMarketing() {
//        Organization org = null;
        List<Organization> org = new ArrayList<>();

        for (Network n : ecoSystem.getNetworkDirectory().getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                if (e instanceof MarketingEnterprise) {
                    for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                        if (o instanceof AdvertisingOrganization) {
                            org.add(o);
                        }
                    }
                }
            }
        }
        if (org != null) {
//            org.getWorkQueue().getWorkRequestList().add(request);
            for (Organization o : org) {
                o.getWorkQueue().getWorkRequestList().add(request);
            }
            userAccount.getWorkQueue().getWorkRequestList().add(request);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton completeBtn;
    private javax.swing.JButton failBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField notesTxtField;
    // End of variables declaration//GEN-END:variables
}
