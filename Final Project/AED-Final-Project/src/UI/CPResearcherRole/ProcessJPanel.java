/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.CPResearcherRole;

import Business.EcoSystem.EcoSystem;
import Business.EnterpriseDirectory.CompoundPharmacyEnterprise;
import Business.EnterpriseDirectory.Enterprise;
import Business.Network.Network;
import Business.Organization.InspectionOrganization;
import Business.Organization.Organization;
import Business.Organization.ResearchOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author ketanmalik
 */
public class ProcessJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ProcessJPanel
     */
    private JPanel displayPanel;
    private UserAccount userAccount;
    private Enterprise enterprise;
    private ResearchOrganization researchOrganization;
    private EcoSystem ecoSystem;
    private WorkRequest request;
    private static int id = 1;
    String medicineName = "";
    int strength = 0;
    String type = "";
    String description = "";
    String activeIngredient = "";
    String sub1 = "";
    String sub2 = "";
    int r1 = 0;
    int r2 = 0;

    public ProcessJPanel(JPanel displayPanel, UserAccount userAccount, Enterprise enterprise, Organization organization, EcoSystem ecoSystem, WorkRequest request) {
        initComponents();
        this.displayPanel = displayPanel;
        this.userAccount = userAccount;
        this.enterprise = enterprise;
        this.researchOrganization = (ResearchOrganization) organization;
        this.ecoSystem = ecoSystem;
        this.request = request;
        populateFields();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        notesTxtField = new javax.swing.JTextField();
        completeBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        nameTxtField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        strengthTxtField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        typeDropdown = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        activeIngredientTxtField = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        descriptionTxtField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        orderNoTxtField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        sub1txtField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        ratio1TxtField = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        sub2TxtField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        ratio2TxtField = new javax.swing.JTextField();
        saveBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Notes to Inspection Team:");

        completeBtn.setText("Complete Process");
        completeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                completeBtnActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Medicine Name:");

        nameTxtField.setText("jTextField1");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Strength:");

        strengthTxtField.setText("jTextField2");

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Medicine Type:");

        typeDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tablet", "Capsule", "Syrup" }));

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Active Ingredient:");

        activeIngredientTxtField.setText("jTextField6");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Description:");

        descriptionTxtField.setText("jTextField7");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Order Number:");

        orderNoTxtField.setEnabled(false);

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Substance 1:");

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Ratio:");

        jLabel10.setForeground(new java.awt.Color(255, 255, 255));
        jLabel10.setText("Substance 2");

        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setText("Ratio:");

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel3)
                            .addComponent(jLabel6)
                            .addComponent(jLabel10)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(orderNoTxtField)
                                    .addComponent(nameTxtField)
                                    .addComponent(activeIngredientTxtField)
                                    .addComponent(typeDropdown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(strengthTxtField)
                                    .addComponent(sub1txtField, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                                    .addComponent(sub2TxtField, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(ratio1TxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(ratio2TxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(notesTxtField, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(descriptionTxtField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(129, 129, 129)
                                .addComponent(saveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(completeBtn))))
                    .addComponent(backBtn))
                .addContainerGap(330, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(backBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(orderNoTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(nameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(activeIngredientTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(typeDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(strengthTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(sub1txtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(ratio1TxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(sub2TxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(ratio2TxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(descriptionTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(notesTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveBtn)
                    .addComponent(completeBtn))
                .addGap(272, 272, 272))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        displayPanel.remove(this);
        Component[] componentArray = displayPanel.getComponents();
        Component component = componentArray[componentArray.length - 1];
        ResearcherWorkAreaJPanel rwjp = (ResearcherWorkAreaJPanel) component;
        rwjp.populateTables();
        CardLayout layout = (CardLayout) displayPanel.getLayout();
        layout.previous(displayPanel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void populateFields() {
        orderNoTxtField.setText(request.getId());
        nameTxtField.setText(request.getMedicine().getName());
        strengthTxtField.setText(String.valueOf(request.getMedicine().getStrength()));
        activeIngredientTxtField.setText(request.getMedicine().getActiveIngredient());
        descriptionTxtField.setText(request.getMedicine().getDescription());
        sub1txtField.setText(request.getMedicine().getS1());
        sub2TxtField.setText(request.getMedicine().getS2());
        ratio1TxtField.setText(String.valueOf(request.getMedicine().getR1()));
        ratio2TxtField.setText(String.valueOf(request.getMedicine().getR2()));
        String type = request.getMedicine().getType();
        if (type.equals("Tablet")) {
            typeDropdown.setSelectedIndex(0);
        } else if (type.equals("Capsule")) {
            typeDropdown.setSelectedIndex(1);
        } else if (type.equals("Syrup")) {
            typeDropdown.setSelectedIndex(2);
        }
    }

    private void saveDetails() {
        System.out.println("UI.CPResearcherRole.ProcessJPanel.saveDetails()");
        request.getMedicine().setName(medicineName);
        request.getMedicine().setActiveIngredient(activeIngredient);
        request.getMedicine().setType(type);
        request.getMedicine().setStrength(strength);
        request.getMedicine().setDescription(description);
        request.getMedicine().setS1(sub1);
        request.getMedicine().setS2(sub2);
        request.getMedicine().setR1(r1);
        request.getMedicine().setR2(r2);
    }

    private void completeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_completeBtnActionPerformed
        medicineName = nameTxtField.getText();
        if (medicineName == null || medicineName.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter valid medicine name", "Invalid Name", JOptionPane.ERROR_MESSAGE);
            return;
        }
        activeIngredient = activeIngredientTxtField.getText();
        if (activeIngredientTxtField.equals("") || activeIngredientTxtField == null) {
            JOptionPane.showMessageDialog(null, "Please enter valid active ingredient", "Invalid Ingredient", JOptionPane.ERROR_MESSAGE);
            return;
        }
        type = String.valueOf(typeDropdown.getSelectedItem());
        try {
            Integer.parseInt(strengthTxtField.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter valid value for strength", "Invalid Value", JOptionPane.ERROR_MESSAGE);
            return;
        }
        strength = Integer.parseInt(strengthTxtField.getText());
        sub1 = sub1txtField.getText();
        if (sub1 == null || sub1.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter valid value for substance 1", "Invalid Value", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            Integer.parseInt(ratio1TxtField.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter valid value for subtance 1 ratio", "Invalid Value", JOptionPane.ERROR_MESSAGE);
            return;
        }
        r1 = Integer.parseInt(ratio1TxtField.getText());
        sub2 = sub2TxtField.getText();
        if (sub2 == null || sub2.equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter valid value for substance 2", "Invalid Value", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            Integer.parseInt(ratio2TxtField.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please enter valid value for subtance 2 ratio", "Invalid Value", JOptionPane.ERROR_MESSAGE);
            return;
        }
        r2 = Integer.parseInt(ratio2TxtField.getText());
        description = descriptionTxtField.getText();
        if (description.equals("") || description == null) {
            JOptionPane.showMessageDialog(null, "Please enter valid description for medicine", "Invalid Description", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!medicineName.equalsIgnoreCase(request.getMedicine().getName())
                || strength != request.getMedicine().getStrength()
                || !type.equalsIgnoreCase(request.getMedicine().getType())
                || !activeIngredient.equalsIgnoreCase(request.getMedicine().getActiveIngredient())) {
            int input = JOptionPane.showOptionDialog(null, "One or more fields do not match the details in research request. Do you still wish to proceed further. If not, the details from research request will be automatically populated", "Process Confirmation", JOptionPane.OK_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);

            if (input == JOptionPane.OK_OPTION) {
                String progress = (notesTxtField.getText() == null || notesTxtField.getText().equals("")) ? "" : notesTxtField.getText();
                request.getMedicine().setName(medicineName);
                request.getMedicine().setStrength(strength);
                request.getMedicine().setType(type);
                request.getMedicine().setActiveIngredient(activeIngredient);
                request.getMedicine().setDescription(description);
                request.setProgress(progress);
                request.setStatus("Sent for inspection");
                request.setSender(userAccount);
                request.setReceiver(null);
                saveDetails();
                userAccount.getWorkQueue().getWorkRequestList().clear();
                sendToInspection();
                JOptionPane.showMessageDialog(null, "Your request has been sent to inspection team");
                displayPanel.remove(this);
                Component[] componentArray = displayPanel.getComponents();
                Component component = componentArray[componentArray.length - 1];
                ResearcherWorkAreaJPanel mwjp = (ResearcherWorkAreaJPanel) component;
                mwjp.populateTables();
                CardLayout layout = (CardLayout) displayPanel.getLayout();
                layout.previous(displayPanel);
            } else {
                populateFields();
            }
        } else {
            int input = JOptionPane.showOptionDialog(null, "Are you you want to send " + request.getId() + " request for inspection?", "Process Confirmation", JOptionPane.OK_OPTION, JOptionPane.INFORMATION_MESSAGE, null, null, null);

            if (input == JOptionPane.OK_OPTION) {
                String progress = (notesTxtField.getText() == null || notesTxtField.getText().equals("")) ? "" : notesTxtField.getText();
                request.getMedicine().setDescription(description);
                request.setProgress(progress);
                request.setStatus("Sent for inspection");
                request.setSender(userAccount);
                request.setReceiver(null);
                saveDetails();
                userAccount.getWorkQueue().getWorkRequestList().clear();
                sendToInspection();
                JOptionPane.showMessageDialog(null, "Your request has been sent to inspection team");
                displayPanel.remove(this);
                Component[] componentArray = displayPanel.getComponents();
                Component component = componentArray[componentArray.length - 1];
                ResearcherWorkAreaJPanel mwjp = (ResearcherWorkAreaJPanel) component;
                mwjp.populateTables();
                CardLayout layout = (CardLayout) displayPanel.getLayout();
                layout.previous(displayPanel);
            }
        }
    }//GEN-LAST:event_completeBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        if (!nameTxtField.getText().equalsIgnoreCase(medicineName)) {
            medicineName = nameTxtField.getText();
        }
        if (!descriptionTxtField.getText().equalsIgnoreCase(description)) {
            description = descriptionTxtField.getText();
        }
        if (!activeIngredientTxtField.getText().equalsIgnoreCase(activeIngredient)) {
            activeIngredient = activeIngredientTxtField.getText();
        }
        if (!sub1txtField.getText().equalsIgnoreCase(sub1)) {
            sub1 = sub1txtField.getText();
        }
        if (!sub2TxtField.getText().equalsIgnoreCase(sub2)) {
            sub2 = sub2TxtField.getText();
        }
        if (!(String.valueOf(typeDropdown.getSelectedItem()).equalsIgnoreCase(type))) {
            type = String.valueOf(typeDropdown.getSelectedItem());
        }
        try {
            Integer.parseInt(strengthTxtField.getText());
            if (Integer.parseInt(strengthTxtField.getText()) != strength) {
                strength = Integer.parseInt(strengthTxtField.getText());
            }
        } catch (Exception e) {
            if (strengthTxtField.isEnabled()) {
                if (strengthTxtField.getText().equals("") || strengthTxtField.getText() == null) {
                    strength = 0;
                } else {
                    JOptionPane.showMessageDialog(null, "Please enter valid value for medicine strength", "Invalid Number", JOptionPane.ERROR_MESSAGE);
                    strength = 0;
                    return;
                }
            }
        }
        try {
            Integer.parseInt(ratio1TxtField.getText());
            if (Integer.parseInt(ratio1TxtField.getText()) != r1) {
                r1 = Integer.parseInt(ratio1TxtField.getText());
            }
        } catch (Exception e) {
            if (ratio1TxtField.getText().equals("") || ratio1TxtField.getText() == null) {
                r1 = 0;
            } else {
                JOptionPane.showMessageDialog(null, "Please enter valid ratio for substance 1", "Invalid Number", JOptionPane.ERROR_MESSAGE);
                r1 = 0;
                return;
            }
        }
        try {
            Integer.parseInt(ratio2TxtField.getText());
            if (Integer.parseInt(ratio2TxtField.getText()) != r2) {
                r2 = Integer.parseInt(ratio2TxtField.getText());
            }
        } catch (Exception e) {
            if (ratio2TxtField.getText().equals("") || ratio2TxtField.getText() == null) {
                r1 = 0;
            } else {
                JOptionPane.showMessageDialog(null, "Please enter valid ratio for substance 2", "Invalid Number", JOptionPane.ERROR_MESSAGE);
                r2 = 0;
                return;
            }
        }
        saveDetails();
        JOptionPane.showMessageDialog(null, "Details saved successdully");
    }//GEN-LAST:event_saveBtnActionPerformed

    private void sendToInspection() {
        //        Organization org = null;
        List<Organization> org = new ArrayList<>();

        for (Network n : ecoSystem.getNetworkDirectory().getNetworkList()) {
            for (Enterprise e : n.getEnterpriseDirectory().getEnterpriseList()) {
                if (e instanceof CompoundPharmacyEnterprise) {
                    for (Organization o : e.getOrganizationDirectory().getOrganizationList()) {
                        if (o instanceof InspectionOrganization) {
                            org.add(o);
                        }
                    }
                }
            }
        }
//        for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
//            if (o instanceof InspectionOrganization) {
//                org = o;
//                break;
//            }
//        }

        if (org != null) {
            for (Organization o : org) {
                o.getWorkQueue().getWorkRequestList().add(request);
            }
        }
//        Organization org = null;
//        for (Organization o : enterprise.getOrganizationDirectory().getOrganizationList()) {
//            if (o instanceof InspectionOrganization) {
//                org = o;
//                break;
//            }
//        }
//        if (org != null) {
//            org.getWorkQueue().getWorkRequestList().add(request);
//            userAccount.getWorkQueue().getWorkRequestList().add(request);
//        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField activeIngredientTxtField;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton completeBtn;
    private javax.swing.JTextField descriptionTxtField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField nameTxtField;
    private javax.swing.JTextField notesTxtField;
    private javax.swing.JTextField orderNoTxtField;
    private javax.swing.JTextField ratio1TxtField;
    private javax.swing.JTextField ratio2TxtField;
    private javax.swing.JButton saveBtn;
    private javax.swing.JTextField strengthTxtField;
    private javax.swing.JTextField sub1txtField;
    private javax.swing.JTextField sub2TxtField;
    private javax.swing.JComboBox<String> typeDropdown;
    // End of variables declaration//GEN-END:variables
}
