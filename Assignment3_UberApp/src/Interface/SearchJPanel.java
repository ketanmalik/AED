/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.CarAttributes;
import Business.CarFleet;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author ketanmalik
 */
public class SearchJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchJPanel
     */
    private JPanel displayPanel;
    private CarFleet carFleet;
    private List<String> tempList;
    public int flag = 0;

    public SearchJPanel(JPanel displayPanel, CarFleet carFleet) {
        initComponents();
        this.displayPanel = displayPanel;
        this.carFleet = carFleet;
        handleFieldsVisibility();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        titleLabel = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        searchLabel = new javax.swing.JLabel();
        searchDropdown = new javax.swing.JComboBox<>();
        searchBtn = new javax.swing.JButton();
        firstAvailCarTxtField = new javax.swing.JTextField();
        availCarsLabel = new javax.swing.JLabel();
        unavailCarsLabel = new javax.swing.JLabel();
        availCarsTxtField = new javax.swing.JTextField();
        unavailCarsTxtField = new javax.swing.JTextField();
        resultDropdown = new javax.swing.JComboBox<>();
        resultListScrollPane = new javax.swing.JScrollPane();
        resultList = new javax.swing.JList<>();
        capacityScrollPane = new javax.swing.JScrollPane();
        capacityList = new javax.swing.JList<>();
        minCapacity = new javax.swing.JTextField();
        maxCapacity = new javax.swing.JTextField();
        minCapacityLabel = new javax.swing.JLabel();
        maxCapacityLabel = new javax.swing.JLabel();
        serialNoTxtField = new javax.swing.JTextField();

        jLabel1.setText("jLabel1");

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setBackground(new java.awt.Color(204, 204, 204));

        titleLabel.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        titleLabel.setText("Search Cars in Uber fleet");

        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/backIcon.png"))); // NOI18N
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        searchLabel.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        searchLabel.setText("Search by:");

        searchDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "First available car", "Total available/unavailable cars", "Manufacturer", "Year of Manufacture", "Car capacity", "Serial number", "Model", "Available cars in a city", "Cars which are due maintenance" }));
        searchDropdown.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchDropdownMouseClicked(evt);
            }
        });
        searchDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDropdownActionPerformed(evt);
            }
        });

        searchBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/searchIcon.png"))); // NOI18N
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        firstAvailCarTxtField.setEnabled(false);
        firstAvailCarTxtField.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                firstAvailCarTxtFieldComponentHidden(evt);
            }
        });

        availCarsLabel.setText("Available Cars:");

        unavailCarsLabel.setText("Unavailable Cars:");

        availCarsTxtField.setEnabled(false);

        unavailCarsTxtField.setEnabled(false);

        resultList.setEnabled(false);
        resultListScrollPane.setViewportView(resultList);

        capacityList.setEnabled(false);
        capacityScrollPane.setViewportView(capacityList);

        maxCapacity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxCapacityActionPerformed(evt);
            }
        });

        minCapacityLabel.setText("Min Capacity:");

        maxCapacityLabel.setText("Max Capacity:");

        serialNoTxtField.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                serialNoTxtFieldComponentHidden(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(232, 232, 232)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(availCarsLabel)
                                .addComponent(unavailCarsLabel))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(minCapacityLabel)
                                    .addComponent(maxCapacityLabel))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                    .addComponent(firstAvailCarTxtField)
                                    .addComponent(availCarsTxtField)
                                    .addComponent(unavailCarsTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(447, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(maxCapacity, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                                    .addComponent(minCapacity, javax.swing.GroupLayout.Alignment.LEADING))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(capacityScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resultListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titleLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(searchLabel)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(serialNoTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(resultDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(titleLabel)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(backBtn)
                            .addComponent(searchLabel)
                            .addComponent(searchDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resultDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(searchBtn))
                    .addComponent(serialNoTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 82, Short.MAX_VALUE)
                .addComponent(firstAvailCarTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minCapacityLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(maxCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxCapacityLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(availCarsTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(availCarsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(unavailCarsTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(unavailCarsLabel))
                        .addGap(47, 47, 47)
                        .addComponent(capacityScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(resultListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(101, 101, 101))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        displayPanel.remove(this);
        CardLayout layout = (CardLayout) displayPanel.getLayout();
        layout.previous(displayPanel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:
        String searchTerm = String.valueOf(searchDropdown.getSelectedItem());
        switch (searchTerm) {
            case "First available car":
                handleFieldsVisibility();
                int index = carFleet.firstAvailableCar();
                CarAttributes ca = carFleet.getCarFleet().get(index);
                String car = ca.getManufacturer() + " " + ca.getName();
                if (index == 100) {
                    JOptionPane.showMessageDialog(null, "No cars available at the moment");
                } else {
                    firstAvailCarTxtField.setVisible(true);
                    firstAvailCarTxtField.getParent().validate();
                    firstAvailCarTxtField.setText(car);
                }
                break;
            case "Total available/unavailable cars":
                handleFieldsVisibility();
                int avail = 0;
                for (CarAttributes e : carFleet.getCarFleet()) {
                    if (e.isAvailability()) {
                        avail += 1;
                    }
                }
                int unavail = carFleet.getCarFleet().size() - avail;
                availCarsLabel.setVisible(true);
                availCarsTxtField.setVisible(true);
                unavailCarsLabel.setVisible(true);
                unavailCarsTxtField.setVisible(true);
                availCarsTxtField.setText(avail + "");
                unavailCarsTxtField.setText(unavail + "");
                break;

            case "Manufacturer":
                if (flag == 1) {
                    initializeManufacturerDropdown();
                    flag = 0;
                }
                if (resultDropdown.isVisible()) {
                    findManufacturerResults();
                } else {
                    initializeManufacturerDropdown();
                    handleFieldsVisibility();
                    resultDropdown.setVisible(true);
                }
                break;
            case "Year of Manufacture":
                if (flag == 1) {
                    initializeYomDropdown();
                    flag = 0;
                }
                if (resultDropdown.isVisible()) {
                    findYomResults();
                } else {
                    initializeYomDropdown();
                    handleFieldsVisibility();
                    resultDropdown.setVisible(true);
                }
                break;
            case "Car capacity":
                if (minCapacity.isVisible()) {
                    findAvailableCarsWithCapacity();
                } else {
                    handleFieldsVisibility();
                    minCapacity.setVisible(true);
                    minCapacity.getParent().validate();
                    minCapacityLabel.setVisible(true);
                    maxCapacity.setVisible(true);
                    maxCapacity.getParent().validate();
                    maxCapacityLabel.setVisible(true);
                }
                break;
            case "Serial number":
                if (flag == 1) {
                    serialNoTxtField.setText("");
                    flag = 0;
                }
                if (serialNoTxtField.isVisible()) {
                    findSerialNumber();
                } else {
                    handleFieldsVisibility();
                    serialNoTxtField.setVisible(true);
                    serialNoTxtField.getParent().validate();
                }
                break;
            case "Model":
                if (flag == 1) {
                    serialNoTxtField.setText("");
                    flag = 0;
                }
                if (serialNoTxtField.isVisible()) {
                    findModelNumber();
                } else {
                    handleFieldsVisibility();
                    serialNoTxtField.setVisible(true);
                    serialNoTxtField.getParent().validate();
                }
                break;
            case "Available cars in a city":
                if (flag == 1) {
                    initializeCityDropdown();
                    flag = 0;
                }
                if (resultDropdown.isVisible()) {
                    findCityResults();
                } else {
                    initializeCityDropdown();
                    resultDropdown.setVisible(true);
                }
                break;
            case "Cars which are due maintenance":
                handleFieldsVisibility();
                findDueMaintenance();

        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void findDueMaintenance() {
        DefaultListModel<String> maintList = new DefaultListModel<>();
        for (CarAttributes e : carFleet.getCarFleet()) {
            if (!e.isMaintenanceCertificate()) {
                maintList.addElement(e.getManufacturer() + " " + e.getName());
            }
        }
        resultList.removeAll();
        resultList.setModel(maintList);
        resultListScrollPane.setVisible(true);
        resultListScrollPane.getParent().validate();
        resultList.setVisible(true);
        resultList.getParent().validate();
    }

    private void findCityResults() {
        handleFieldsVisibility();
        resultDropdown.setVisible(true);
        DefaultListModel<String> cityList = new DefaultListModel<>();
        String city = String.valueOf(resultDropdown.getSelectedItem());
        for (CarAttributes e : carFleet.getCarFleet()) {
            if (e.getCity().equalsIgnoreCase(city)) {
                cityList.addElement(e.getManufacturer() + " " + e.getName());
            }
        }
        resultList.removeAll();
        resultList.setModel(cityList);
        resultListScrollPane.setVisible(true);
        resultList.setVisible(true);
    }

    private void initializeCityDropdown() {
        resultDropdown.removeAllItems();
        resultDropdown.addItem("Boston");
        resultDropdown.addItem("Florida");
        resultDropdown.addItem("Saint Louis");
        resultDropdown.addItem("Chicago");
        tempList = new ArrayList<>();
        tempList.add("Boston");
        tempList.add("Florida");
        tempList.add("Saint Louis");
        tempList.add("Chicago");
        for (CarAttributes e : carFleet.getCarFleet()) {
            if (!(tempList.contains(e.getCity()))) {
                resultDropdown.addItem(e.getCity());
            }
        }
    }

    private void findModelNumber() {
        String modelNo = serialNoTxtField.getText();
        if (modelNo == null || modelNo.equals("")) {
            JOptionPane.showMessageDialog(null, "Pleae enter valid model");
        } else {
            DefaultListModel model = new DefaultListModel<>();
            for (CarAttributes e : carFleet.getCarFleet()) {
                if (e.getModelNo().equalsIgnoreCase(modelNo)) {
                    model.addElement(e.getModelNo());
                }
            }
            resultList.removeAll();
            resultList.setModel(model);
            resultListScrollPane.setVisible(true);
            resultListScrollPane.getParent().validate();
            resultList.setVisible(true);
            resultList.getParent().validate();
        }
    }

    private void findSerialNumber() {
        try {
            int sNo = Integer.parseInt(serialNoTxtField.getText());
            CarAttributes ca = new CarAttributes();
            ca = null;

            for (CarAttributes e : carFleet.getCarFleet()) {
                if (e.getSerialNo() == sNo) {
                    ca = e;
                    break;
                }
            }
            if (ca != null) {
                SearchResultJPanel results = new SearchResultJPanel(displayPanel, ca);
                displayPanel.add("results", results);
                CardLayout layout = (CardLayout) displayPanel.getLayout();
                layout.next(displayPanel);

            } else {
                JOptionPane.showMessageDialog(null, "Serial Number does not exist");
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter valid serial number");
        }
    }

    private void findAvailableCarsWithCapacity() {
        handleFieldsVisibility();
        minCapacity.setVisible(true);
        minCapacity.getParent().validate();
        minCapacityLabel.setVisible(true);
        maxCapacity.setVisible(true);
        maxCapacity.getParent().validate();
        maxCapacityLabel.setVisible(true);

        try {
            int min = Integer.parseInt(minCapacity.getText());
            int max = Integer.parseInt(maxCapacity.getText());
            if (min > max) {
                JOptionPane.showMessageDialog(null, "Minimum capacity should be less than maximum capacity");
            } else {
                DefaultListModel<String> capList = new DefaultListModel<>();
                for (CarAttributes e : carFleet.getCarFleet()) {
                    if (e.isAvailability() && (e.getCapacity() >= min && e.getCapacity() <= max)) {
                        capList.addElement((e.getManufacturer() + " " + e.getName()));
                    }
                }
                capacityList.setModel(capList);
                capacityScrollPane.setVisible(true);
                capacityScrollPane.getParent().validate();
                capacityList.setVisible(true);
                capacityList.getParent().validate();
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter valid value");
        }
    }

    private void findYomResults() {
        handleFieldsVisibility();
        resultDropdown.setVisible(true);
        DefaultListModel<String> yomList = new DefaultListModel<>();
        String yom = String.valueOf(resultDropdown.getSelectedItem());
        for (CarAttributes e : carFleet.getCarFleet()) {
            if ((e.getYearOfManufacture() + "").equals(yom)) {
                yomList.addElement((e.getManufacturer() + " " + e.getName()));
            }
        }
        resultList.removeAll();
        resultList.setModel(yomList);
        resultListScrollPane.setVisible(true);
        resultList.setVisible(true);
    }

    private void initializeYomDropdown() {
        resultDropdown.removeAllItems();
        resultDropdown.addItem(2011 + "");
        resultDropdown.addItem(2012 + "");
        resultDropdown.addItem(2015 + "");
        resultDropdown.addItem(2016 + "");
        resultDropdown.addItem(2017 + "");
        resultDropdown.addItem(2019 + "");
        tempList = new ArrayList<>();
        tempList.add(2011 + "");
        tempList.add(2012 + "");
        tempList.add(2015 + "");
        tempList.add(2016 + "");
        tempList.add(2017 + "");
        tempList.add(2019 + "");
        for (CarAttributes e : carFleet.getCarFleet()) {
            if (!(tempList.contains(e.getYearOfManufacture() + ""))) {
                resultDropdown.addItem(e.getYearOfManufacture() + "");
            }
        }

    }

    private void findManufacturerResults() {
        handleFieldsVisibility();
        resultDropdown.setVisible(true);
        DefaultListModel<String> manufacturerList = new DefaultListModel<>();
        String manufacturer = String.valueOf(resultDropdown.getSelectedItem());
        for (CarAttributes e : carFleet.getCarFleet()) {
            if (e.getManufacturer().equals(manufacturer)) {
                manufacturerList.addElement(e.getName());
            }
        }
        resultList.removeAll();
        resultList.setModel(manufacturerList);
        resultListScrollPane.setVisible(true);
        resultList.setVisible(true);
    }

    private void initializeManufacturerDropdown() {
        resultDropdown.removeAllItems();
        resultDropdown.addItem("Mazda");
        resultDropdown.addItem("Toyota");
        resultDropdown.addItem("Ford");
        resultDropdown.addItem("Cadillac");
        resultDropdown.addItem("Hyundai");
        resultDropdown.addItem("Nissan");
        resultDropdown.addItem("GMC");
        resultDropdown.addItem("Kia");
        resultDropdown.addItem("Jeep");
        tempList = new ArrayList<>();
        tempList.add("Mazda");
        tempList.add("Toyota");
        tempList.add("Ford");
        tempList.add("Cadillac");
        tempList.add("Hyundai");
        tempList.add("Nissan");
        tempList.add("GMC");
        tempList.add("Kia");
        tempList.add("Jeep");
        for (CarAttributes e : carFleet.getCarFleet()) {
            if (!(tempList.contains(e.getManufacturer()))) {
                resultDropdown.addItem(e.getManufacturer());
            }
        }
    }
    private void firstAvailCarTxtFieldComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_firstAvailCarTxtFieldComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_firstAvailCarTxtFieldComponentHidden

    private void searchDropdownMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchDropdownMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_searchDropdownMouseClicked

    private void searchDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDropdownActionPerformed
        // TODO add your handling code here:
        flag = 1;
        handleFieldsVisibility();
    }//GEN-LAST:event_searchDropdownActionPerformed

    private void maxCapacityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxCapacityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxCapacityActionPerformed

    private void serialNoTxtFieldComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_serialNoTxtFieldComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_serialNoTxtFieldComponentHidden
    private void handleFieldsVisibility() {
        firstAvailCarTxtField.setVisible(false);
        availCarsTxtField.setVisible(false);
        availCarsLabel.setVisible(false);
        unavailCarsTxtField.setVisible(false);
        unavailCarsLabel.setVisible(false);
        resultDropdown.setVisible(false);
        resultList.setVisible(false);
        resultListScrollPane.setVisible(false);
        minCapacity.setVisible(false);
        minCapacityLabel.setVisible(false);
        maxCapacity.setVisible(false);
        maxCapacityLabel.setVisible(false);
        capacityScrollPane.setVisible(false);
        capacityList.setVisible(false);
        serialNoTxtField.setVisible(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel availCarsLabel;
    private javax.swing.JTextField availCarsTxtField;
    private javax.swing.JButton backBtn;
    private javax.swing.JList<String> capacityList;
    private javax.swing.JScrollPane capacityScrollPane;
    private javax.swing.JTextField firstAvailCarTxtField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField maxCapacity;
    private javax.swing.JLabel maxCapacityLabel;
    private javax.swing.JTextField minCapacity;
    private javax.swing.JLabel minCapacityLabel;
    private javax.swing.JComboBox<String> resultDropdown;
    private javax.swing.JList<String> resultList;
    private javax.swing.JScrollPane resultListScrollPane;
    private javax.swing.JButton searchBtn;
    private javax.swing.JComboBox<String> searchDropdown;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JTextField serialNoTxtField;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel unavailCarsLabel;
    private javax.swing.JTextField unavailCarsTxtField;
    // End of variables declaration//GEN-END:variables
}
