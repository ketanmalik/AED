/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.CarAttributes;
import Business.CarFleet;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author ketanmalik
 */
public class SearchJPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchJPanel
     */
    private JPanel displayPanel;
    private CarFleet carFleet;
    public int flag = 0;
    private boolean found = false;

    public SearchJPanel(JPanel displayPanel, CarFleet carFleet) {
        initComponents();
        this.displayPanel = displayPanel;
        this.carFleet = carFleet;
        handleFieldsVisibility();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        titleLabel = new javax.swing.JLabel();
        backBtn = new javax.swing.JButton();
        searchLabel = new javax.swing.JLabel();
        searchDropdown = new javax.swing.JComboBox<>();
        searchBtn = new javax.swing.JButton();
        availCarsLabel = new javax.swing.JLabel();
        unavailCarsLabel = new javax.swing.JLabel();
        availCarsTxtField = new javax.swing.JTextField();
        unavailCarsTxtField = new javax.swing.JTextField();
        resultDropdown = new javax.swing.JComboBox<>();
        resultListScrollPane = new javax.swing.JScrollPane();
        resultList = new javax.swing.JList<>();
        minCapacity = new javax.swing.JTextField();
        maxCapacity = new javax.swing.JTextField();
        minCapacityLabel = new javax.swing.JLabel();
        maxCapacityLabel = new javax.swing.JLabel();
        serialNoTxtField = new javax.swing.JTextField();

        jLabel1.setText("jLabel1");

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        setBackground(new java.awt.Color(204, 204, 204));

        titleLabel.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        titleLabel.setText("Search Cars in Uber fleet");

        backBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/backIcon.png"))); // NOI18N
        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        searchLabel.setFont(new java.awt.Font("Lucida Grande", 0, 15)); // NOI18N
        searchLabel.setText("Search by:");

        searchDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "First available car", "Total available/unavailable cars", "Manufacturer", "Year of Manufacture", "Available cars with given capacity", "Serial number", "Model", "All manufacturers used", "Last time when catalog was updated", "Available cars in a city", "Cars which are due maintenance", "Manufacturer & Due maintenance" }));
        searchDropdown.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchDropdownMouseClicked(evt);
            }
        });
        searchDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDropdownActionPerformed(evt);
            }
        });

        searchBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Interface/searchIcon.png"))); // NOI18N
        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        availCarsLabel.setText("Available Cars:");

        unavailCarsLabel.setText("Unavailable Cars:");

        availCarsTxtField.setEnabled(false);

        unavailCarsTxtField.setEnabled(false);

        resultList.setEnabled(false);
        resultListScrollPane.setViewportView(resultList);

        maxCapacity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxCapacityActionPerformed(evt);
            }
        });

        minCapacityLabel.setText("Min Capacity:");

        maxCapacityLabel.setText("Max Capacity:");

        serialNoTxtField.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                serialNoTxtFieldComponentHidden(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(242, 242, 242)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(maxCapacityLabel)
                            .addComponent(minCapacityLabel)
                            .addComponent(availCarsLabel)
                            .addComponent(unavailCarsLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(minCapacity, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(maxCapacity)
                            .addComponent(unavailCarsTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(availCarsTxtField)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titleLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(searchLabel)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(searchDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(resultDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(searchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(serialNoTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(302, 302, 302)
                        .addComponent(resultListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(257, 257, 257))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(titleLabel)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(backBtn)
                            .addComponent(searchLabel)
                            .addComponent(searchDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resultDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(searchBtn))
                    .addComponent(serialNoTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(minCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minCapacityLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maxCapacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maxCapacityLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(availCarsTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(availCarsLabel))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(unavailCarsTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(unavailCarsLabel))
                .addGap(18, 18, 18)
                .addComponent(resultListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(94, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        displayPanel.remove(this);
        CardLayout layout = (CardLayout) displayPanel.getLayout();
        layout.previous(displayPanel);
    }//GEN-LAST:event_backBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        String searchTerm = String.valueOf(searchDropdown.getSelectedItem());
        switch (searchTerm) {
            case "First available car":
                serialNoTxtField.setEnabled(false);
                if (flag == 1) {
                    serialNoTxtField.setText("");
                    flag = 0;
                }
                handleFieldsVisibility();
                serialNoTxtField.setVisible(true);
                serialNoTxtField.getParent().validate();
                findFirstAvailCar();
                break;
            case "Total available/unavailable cars":
                handleFieldsVisibility();
                int avail = 0;
                for (CarAttributes e : carFleet.getCarFleet()) {
                    if (e.isAvailability()) {
                        avail += 1;
                    }
                }
                int unavail = carFleet.getCarFleet().size() - avail;
                availCarsLabel.setVisible(true);
                availCarsTxtField.setVisible(true);
                unavailCarsLabel.setVisible(true);
                unavailCarsTxtField.setVisible(true);
                availCarsTxtField.setText(avail + "");
                unavailCarsTxtField.setText(unavail + "");
                break;

            case "Manufacturer":
                if (flag == 1) {
                    initializeManufacturerDropdown();
                    flag = 0;
                }
                if (resultDropdown.isVisible()) {
                    findManufacturerResults("Single Filter");
                } else {
                    initializeManufacturerDropdown();
                    handleFieldsVisibility();
                    resultDropdown.setVisible(true);
                }
                break;
            case "Year of Manufacture":
                if (flag == 1) {
                    initializeYomDropdown();
                    flag = 0;
                }
                if (resultDropdown.isVisible()) {
                    findYomResults();
                } else {
                    initializeYomDropdown();
                    handleFieldsVisibility();
                    resultDropdown.setVisible(true);
                }
                break;
            case "Available cars with given capacity":
                if (minCapacity.isVisible()) {
                    findAvailableCarsWithCapacity();
                } else {
                    handleFieldsVisibility();
                    minCapacity.setVisible(true);
                    minCapacity.getParent().validate();
                    minCapacityLabel.setVisible(true);
                    maxCapacity.setVisible(true);
                    maxCapacity.getParent().validate();
                    maxCapacityLabel.setVisible(true);
                }
                break;
            case "Serial number":
                serialNoTxtField.setEnabled(true);
                if (flag == 1) {
                    serialNoTxtField.setText("");
                    flag = 0;
                }
                if (serialNoTxtField.isVisible()) {
                    findSerialNumber();
                } else {
                    handleFieldsVisibility();
                    serialNoTxtField.setVisible(true);
                    serialNoTxtField.getParent().validate();
                }
                break;
            case "Model":
                serialNoTxtField.setEnabled(true);
                if (flag == 1) {
                    serialNoTxtField.setText("");
                    flag = 0;
                }
                if (serialNoTxtField.isVisible()) {
                    findModelNumber();
                } else {
                    handleFieldsVisibility();
                    serialNoTxtField.setVisible(true);
                    serialNoTxtField.getParent().validate();
                }
                break;
            case "All manufacturers used":
                handleFieldsVisibility();
                findAllManufacturers();
                break;
            case "Last time when catalog was updated":
                serialNoTxtField.setEnabled(false);
                if (flag == 1) {
                    serialNoTxtField.setText("");
                    flag = 0;
                }
                handleFieldsVisibility();
                serialNoTxtField.setText(carFleet.getDateTimeOfUpdate());
                serialNoTxtField.setVisible(true);
                serialNoTxtField.getParent().validate();
                break;
            case "Available cars in a city":
                if (flag == 1) {
                    initializeCityDropdown();
                    flag = 0;
                }
                if (resultDropdown.isVisible()) {
                    findCityResults();
                } else {
                    initializeCityDropdown();
                    resultDropdown.setVisible(true);
                }
                break;
            case "Cars which are due maintenance":
                handleFieldsVisibility();
                findDueMaintenance();
                break;
            case "Manufacturer & Due maintenance":
                if (flag == 1) {
                    initializeManufacturerDropdown();
                    flag = 0;
                }
                if (resultDropdown.isVisible()) {
                    findManufacturerResults("Multiple Filter");
                } else {
                    initializeManufacturerDropdown();
                    handleFieldsVisibility();
                    resultDropdown.setVisible(true);
                }
                break;

        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void findFirstAvailCar() {
        int index = carFleet.firstAvailableCar();
        CarAttributes ca = carFleet.getCarFleet().get(index);
        String car = ca.getManufacturer() + " " + ca.getName();
        if (index == 100) {
            JOptionPane.showMessageDialog(null, "No cars available at the moment");
        } else {
            serialNoTxtField.setVisible(true);
            serialNoTxtField.getParent().validate();
            serialNoTxtField.setText(car);
        }
    }

    private void findAllManufacturers() {
        DefaultListModel<String> allManufacturerList = new DefaultListModel<>();
        for (CarAttributes e : carFleet.getCarFleet()) {
            if (!allManufacturerList.contains(e.getManufacturer())) {
                allManufacturerList.addElement(e.getManufacturer());
            }
        }
        resultList.removeAll();
        resultList.setModel(allManufacturerList);
        resultListScrollPane.setVisible(true);
        resultListScrollPane.getParent().validate();
        resultList.setVisible(true);
        resultList.getParent().validate();
    }

    private void findDueMaintenance() {
        DefaultListModel<String> maintList = new DefaultListModel<>();
        for (CarAttributes e : carFleet.getCarFleet()) {
            if (!e.isMaintenanceCertificate()) {
                maintList.addElement(e.getManufacturer() + " " + e.getName());
            }
        }
        resultList.removeAll();
        resultList.setModel(maintList);
        resultListScrollPane.setVisible(true);
        resultListScrollPane.getParent().validate();
        resultList.setVisible(true);
        resultList.getParent().validate();
    }

    private void findCityResults() {
        handleFieldsVisibility();
        resultDropdown.setVisible(true);
        DefaultListModel<String> cityList = new DefaultListModel<>();
        String city = String.valueOf(resultDropdown.getSelectedItem());
        for (CarAttributes e : carFleet.getCarFleet()) {
            if (e.getCity().equalsIgnoreCase(city)) {
                cityList.addElement(e.getManufacturer() + " " + e.getName());
            }
        }
        resultList.removeAll();
        resultList.setModel(cityList);
        resultListScrollPane.setVisible(true);
        resultList.setVisible(true);
    }

    private void initializeCityDropdown() {
        resultDropdown.removeAllItems();
        for (CarAttributes e : carFleet.getCarFleet()) {
            if (resultDropdown.getItemCount() > 0) {
                String nameInFleet = e.getCity();
                for (int i = 0; i < resultDropdown.getItemCount(); i++) {
                    String nameInDropdown = resultDropdown.getItemAt(i);
                    if (nameInDropdown.equalsIgnoreCase(nameInFleet)) {
                        found = true;
                        break;
                    }
                }
            }
            if (!found) {
                resultDropdown.addItem(e.getCity());
            }
            found = false;
        }
    }

    private void findModelNumber() {
        String modelNo = serialNoTxtField.getText();
        if (modelNo == null || modelNo.equals("")) {
            JOptionPane.showMessageDialog(null, "Pleae enter valid model");
        } else {
            DefaultListModel model = new DefaultListModel<>();
            for (CarAttributes e : carFleet.getCarFleet()) {
                if (e.getModelNo().equalsIgnoreCase(modelNo)) {
                    model.addElement(e.getManufacturer() + " " + e.getName() + " " + e.getModelNo());
                    found = true;
                }
            }
            if (!found) {
                JOptionPane.showMessageDialog(null, "No car model found for " + modelNo);
            } else {
                resultList.removeAll();
                resultList.setModel(model);
                resultListScrollPane.setVisible(true);
                resultListScrollPane.getParent().validate();
                resultList.setVisible(true);
                resultList.getParent().validate();
            }
        }
        found = false;
    }

    private void findSerialNumber() {
        try {
            int sNo = Integer.parseInt(serialNoTxtField.getText());
            CarAttributes ca = new CarAttributes();
            ca = null;

            for (CarAttributes e : carFleet.getCarFleet()) {
                if (e.getSerialNo() == sNo) {
                    ca = e;
                    break;
                }
            }
            if (ca != null) {
                SearchResultJPanel results = new SearchResultJPanel(displayPanel, ca);
                displayPanel.add("results", results);
                CardLayout layout = (CardLayout) displayPanel.getLayout();
                layout.next(displayPanel);

            } else {
                JOptionPane.showMessageDialog(null, "Serial Number does not exist");
            }

        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter valid serial number");
        }
    }

    private void findAvailableCarsWithCapacity() {
        handleFieldsVisibility();
        minCapacity.setVisible(true);
        minCapacity.getParent().validate();
        minCapacityLabel.setVisible(true);
        maxCapacity.setVisible(true);
        maxCapacity.getParent().validate();
        maxCapacityLabel.setVisible(true);

        try {
            int min = Integer.parseInt(minCapacity.getText());
            int max = Integer.parseInt(maxCapacity.getText());
            if (min > max) {
                JOptionPane.showMessageDialog(null, "Minimum capacity should be less than maximum capacity");
            } else {
                DefaultListModel<String> capList = new DefaultListModel<>();
                for (CarAttributes e : carFleet.getCarFleet()) {
                    if (e.isAvailability() && (e.getCapacity() >= min && e.getCapacity() <= max)) {
                        System.out.println("Interface.SearchJPanel.findAvailableCarsWithCapacity()");
                        capList.addElement((e.getManufacturer() + " " + e.getName()));
                        found = true;
                    }
                }
                if (!found) {
                    JOptionPane.showMessageDialog(null, "No cars found with given capacity");

                } else {
                    resultList.removeAll();
                    resultList.setModel(capList);
                    resultListScrollPane.setVisible(true);
                    resultListScrollPane.getParent().validate();
                    resultList.setVisible(true);
                    resultList.getParent().validate();
                }
                found = false;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter valid value");
        }
    }

    private void findYomResults() {
        handleFieldsVisibility();
        resultDropdown.setVisible(true);
        DefaultListModel<String> yomList = new DefaultListModel<>();
        String yom = String.valueOf(resultDropdown.getSelectedItem());
        for (CarAttributes e : carFleet.getCarFleet()) {
            if ((e.getYearOfManufacture() + "").equals(yom)) {
                yomList.addElement((e.getManufacturer() + " " + e.getName()));
            }
        }
        resultList.removeAll();
        resultList.setModel(yomList);
        resultListScrollPane.setVisible(true);
        resultList.setVisible(true);
    }

    private void initializeYomDropdown() {
        resultDropdown.removeAllItems();
        for (CarAttributes e : carFleet.getCarFleet()) {
            if (resultDropdown.getItemCount() > 0) {
                String yomInFleet = String.valueOf(e.getYearOfManufacture());
                for (int i = 0; i < resultDropdown.getItemCount(); i++) {
                    String yomInDropdown = String.valueOf(resultDropdown.getItemAt(i));
                    if (yomInDropdown.equals(yomInFleet)) {
                        found = true;
                        break;
                    }
                }
            }
            if (!found) {
                resultDropdown.addItem(String.valueOf(e.getYearOfManufacture()));
            }
            found = false;
        }
    }

    private void findManufacturerResults(String mode) {
        handleFieldsVisibility();
        resultList.removeAll();
        if (mode.equals("Single Filter")) {
            resultDropdown.setVisible(true);
            DefaultListModel<String> manufacturerList = new DefaultListModel<>();
            String manufacturer = String.valueOf(resultDropdown.getSelectedItem());
            for (CarAttributes e : carFleet.getCarFleet()) {
                if (e.getManufacturer().equals(manufacturer)) {
                    manufacturerList.addElement(e.getName());
                }
            }
            resultList.setModel(manufacturerList);
            resultListScrollPane.setVisible(true);
            resultList.setVisible(true);
        } else {
            DefaultListModel multipleFilterList = new DefaultListModel<>();
            String manufacturer = String.valueOf(resultDropdown.getSelectedItem());
            for (CarAttributes e : carFleet.getCarFleet()) {
                if ((e.getManufacturer().equalsIgnoreCase(manufacturer))) {
                    if (!e.isMaintenanceCertificate()) {
                        multipleFilterList.addElement(e.getManufacturer() + " " + e.getName());
                        found = true;
                    }
                }
            }
            if (found) {
                resultList.setModel(multipleFilterList);
                resultListScrollPane.setVisible(true);
                resultList.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "No car found in the fleet");
            }
        }
    }

    private void initializeManufacturerDropdown() {
        resultDropdown.removeAllItems();
        for (CarAttributes e : carFleet.getCarFleet()) {
            if (resultDropdown.getItemCount() > 0) {
                String manufacturerInFleet = String.valueOf(e.getManufacturer());
                for (int i = 0; i < resultDropdown.getItemCount(); i++) {
                    String manufacturerInDropdown = String.valueOf(resultDropdown.getItemAt(i));
                    if (manufacturerInDropdown.equalsIgnoreCase(manufacturerInFleet)) {
                        found = true;
                        break;
                    }
                }
            }
            if (!found) {
                resultDropdown.addItem(e.getManufacturer());
            }
            found = false;
        }
    }

    private void handleFieldsVisibility() {
        availCarsTxtField.setVisible(false);
        availCarsLabel.setVisible(false);
        unavailCarsTxtField.setVisible(false);
        unavailCarsLabel.setVisible(false);
        resultDropdown.setVisible(false);
        resultList.setVisible(false);
        resultListScrollPane.setVisible(false);
        minCapacity.setVisible(false);
        minCapacityLabel.setVisible(false);
        maxCapacity.setVisible(false);
        maxCapacityLabel.setVisible(false);
        serialNoTxtField.setVisible(false);
    }

    private void searchDropdownMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchDropdownMouseClicked

    }//GEN-LAST:event_searchDropdownMouseClicked

    private void searchDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDropdownActionPerformed
        flag = 1;
        handleFieldsVisibility();
    }//GEN-LAST:event_searchDropdownActionPerformed

    private void maxCapacityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxCapacityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maxCapacityActionPerformed

    private void serialNoTxtFieldComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_serialNoTxtFieldComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_serialNoTxtFieldComponentHidden

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel availCarsLabel;
    private javax.swing.JTextField availCarsTxtField;
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField maxCapacity;
    private javax.swing.JLabel maxCapacityLabel;
    private javax.swing.JTextField minCapacity;
    private javax.swing.JLabel minCapacityLabel;
    private javax.swing.JComboBox<String> resultDropdown;
    private javax.swing.JList<String> resultList;
    private javax.swing.JScrollPane resultListScrollPane;
    private javax.swing.JButton searchBtn;
    private javax.swing.JComboBox<String> searchDropdown;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JTextField serialNoTxtField;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JLabel unavailCarsLabel;
    private javax.swing.JTextField unavailCarsTxtField;
    // End of variables declaration//GEN-END:variables
}
